---

# "Release build" is only used to execute static analysis.
:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: gem
  :default_tasks:
    - test:all

#:test_build:
#  :use_assembly: TRUE

:release_build:
  :output: analyzed_nexus.out
  :use_assembly: FALSE

:environment:
  # These are normally set by Conda, but control them via this project file
  - :CFLAGS: ""
  - :DEBUG_CFLAGS: ""
  - :CPPFLAGS: ""
  - :DEBUG_CPPFLAGS: ""
  - :LDFLAGS: ""

:extension:
  :executable: .out

:paths:
  :test:
    - +:test/**
  :source:
    - "#{PROJECT_ROOT}/"
    - "#{PROJECT_ROOT}/include/**"
    - "#{PROJECT_ROOT}/oc/**"
    - "#{PROJECT_ROOT}/src/**"
    - "#{PROJECT_ROOT}/utils/**"
    - "#{PROJECT_ROOT}/stub/**"  # only used for 'release' build

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :common: &common_defines []
  :test:
    - *common_defines
    - NEXUS_DEFINED_DURING_TESTING
    - NEXUS_USE_DEFAULT_ASSERT  # enable runtime asserts in unit tests
    - NEXUS_INTERNAL_IMPL_NON_STATIC  #expose certain functions in unit tests
  :test_preprocess:
    - *common_defines

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :callback_after_arg_check: TRUE  # deprecated in newer versions
  :plugins:
    - :ignore
    - :ignore_arg
    - :callback
    - :return_thru_ptr
    - :expect_any_args
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8

# See https://github.com/ThrowTheSwitch/Ceedling/tree/master/plugins/gcov
:gcov:
  # Currently, relative paths to project root are not supported by this plugin
  :abort_on_uncovered: false
  :uncovered_ignore_list:
    - ${PROJECT_ROOT}/stub/main.c
  :delete: false
  :reports:   # new reports style
    - HtmlDetailed
    - SonarQube
    - Text
  :html_report: true  # old reports style
  :html_report_type: detailed
  :gcovr:
    :gcov_exclude: '^.stub.*'
    :html_artifact_filename: nexus_coverage.html
    :sonarqube_artifact_filename: nexus_coverage_sonar.xml

:tools:
  :gcov_fixture:
    :executable: ${1}
  :gcov_report:
    :executable: gcov
    :arguments:
      - -p
      - -b
      - -o "$": GCOV_BUILD_OUTPUT_PATH
      - "\"${1}\""

  :test_compiler:
    #:executable: "#{ENV['GCC']}"  # conda-managed version
    :executable: gcc-10
    :name: 'GCC Compiler'
    :arguments:
      - -I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE
      - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
      - -D$: COLLECTION_DEFINES_TEST_AND_VENDOR
      #- -DDEBUG  # enables NEXUS_ASSERT_FAIL_IN_DEBUG_ONLY, some tests will fire these asserts
      - -DFORTIFY_SOURCE=2
      - -O0
      - -g3  # for debuggability
      # Generic warnings
      - -Werror
      - -Wall
      - -Wextra
      # Specific diagnostics
      - -Warray-bounds
      - -Wconversion
      - -Wlogical-op
      - -Wformat-overflow
      - -Wformat=2
      - -Wshadow
      - -Wstringop-overflow
      - -Wswitch-default
      - -Wundef
      # Globally ignored diagnostics
      - -Wno-unknown-pragmas
      - -Wno-sign-conversion # ignored due to unity test runners
      # Additional functionality
      - -fstack-protector-strong
      # fanalyzer doesn't appear to work well when wrapped in scan-build
      - -fanalyzer
      - -fanalyzer-checker=taint
      # address, pointer, memory sanitizers (leak is optional)
      - -fsanitize=address,pointer-compare,pointer-subtract,leak
      # other sanitizers
      - -fsanitize=undefined,alignment,bounds,bounds-strict,bool,enum
      - -fsanitize=integer-divide-by-zero,nonnull-attribute,null,object-size
      - -fsanitize=pointer-overflow,signed-integer-overflow,shift,shift-base
      - -fsanitize=unreachable,vla-bound
      - -fsanitize-address-use-after-scope
      - -c ${1} # source code input file
      - -o ${2}

  :test_linker:
    #:executable: "#{ENV['GCC']}"  # conda-managed version
    :executable: gcc-10
    :name: 'GCC linker'
    :arguments:
      # address, pointer, memory sanitizers (leak is optional)
      - -fsanitize=address,pointer-compare,pointer-subtract,leak
      # other sanitizers
      - -fsanitize=undefined,alignment,bounds,bounds-strict,bool,enum
      - -fsanitize=integer-divide-by-zero,nonnull-attribute,null,object-size
      - -fsanitize=pointer-overflow,signed-integer-overflow,shift,shift-base
      - -fsanitize=unreachable,vla-bound
      - -fsanitize-address-use-after-scope
      - ${1} # object files
      - -o ${2}

  # "Release" is used to run static analysis on the source code without
  # hitting false positives that may exist in test framework tools.
  :release_compiler:
    :executable: scan-build
    :name: 'vanilla gcc-10 wrapped with clang scan-build (10)'
    :arguments:
      - --status-bugs
      - -enable-checker core.UndefinedBinaryOperatorResult
      - -enable-checker core.DivideZero
      - -enable-checker deadcode.DeadStores
      - -enable-checker alpha.core.BoolAssignment
      - -enable-checker alpha.core.CastSize
      - -enable-checker alpha.core.Conversion
      - -enable-checker alpha.core.FixedAddr
      - -enable-checker alpha.core.IdenticalExpr
      - -enable-checker alpha.core.PointerArithm
      - -enable-checker alpha.core.PointerSub
      - -enable-checker alpha.security.ArrayBoundV2
      - -enable-checker alpha.security.ReturnPtrRange
      - -enable-checker security.FloatLoopCounter
      - -maxloop 40
      # - "#{ENV['GCC']}"  # conda-managed version
      - gcc-10
      - -I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE
      - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
      - -D$: COLLECTION_DEFINES_TEST_AND_VENDOR
      - -DDEBUG  # enables NEXUS_ASSERT_FAIL_IN_DEBUG_ONLY
      - -DFORTIFY_SOURCE=2
      - -O1
      - -g3  # for debuggability
      # Generic warnings/settings
      - -Werror
      - -Wall
      - -Wextra
      # Specific diagnostics
      - -Warray-bounds
      - -Wconversion
      - -Wlogical-op
      - -Wformat-overflow
      - -Wformat=2
      - -Wshadow
      - -Wstringop-overflow
      - -Wswitch-default
      - -Wundef
      # Globally ignored diagnostics
      - -Wno-unknown-pragmas
      # Additional functionality
      - -fstack-protector-strong
      # fanalyzer doesn't appear to work well when wrapped in scan-build
      #- -fanalyzer
      #- -fanalyzer-checker=taint
      # address, pointer, memory sanitizers (leak is optional)
      - -fsanitize=address,pointer-compare,pointer-subtract,leak
      # other sanitizers
      - -fsanitize=undefined,alignment,bounds,bounds-strict,bool,enum
      - -fsanitize=integer-divide-by-zero,nonnull-attribute,null,object-size
      - -fsanitize=pointer-overflow,signed-integer-overflow,shift,shift-base
      - -fsanitize=unreachable,vla-bound
      - -fsanitize-address-use-after-scope
      - -c ${1} # source code input file
      - -o ${2}

  :release_linker:
    #:executable: "#{ENV['GCC']}"  # conda-managed version
    :executable: gcc-10
    :name: 'release linker'
    :arguments:
      # address, pointer, memory sanitizers (leak is optional)
      - -fsanitize=address,pointer-compare,pointer-subtract,leak
      # other sanitizers
      - -fsanitize=undefined,alignment,bounds,bounds-strict,bool,enum
      - -fsanitize=integer-divide-by-zero,nonnull-attribute,null,object-size
      - -fsanitize=pointer-overflow,signed-integer-overflow,shift,shift-base
      - -fsanitize=unreachable,vla-bound
      - -fsanitize-address-use-after-scope
      - ${1} # object files
      - -o ${2}

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "${1}"  # or "-L ${1}" for example
  :test: []
  :release: []

:plugins:
  :load_paths:
    - "#{Ceedling.load_path}"
  :enabled:
    - stdout_pretty_tests_report
    - xml_tests_report
    - gcov
    - module_generator
...
